@page "/books/create/"
@inject IBookService bookService
@inject IAuthorService authorService
@inject NavigationManager navManager
@attribute [Authorize(Roles = Roles.Administrator)]

<h3>Create New Book</h3>

<EditForm Model="Book" OnValidSubmit="HandleCreateBook">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        <label for="title">Book Title</label>
        <InputText class="form-control" @bind-Value="Book.Title" id="title"/>
    </div>
    <br/>
    <div class="form-group">
        <label for="isbn">ISBN</label>
        <InputText class="form-control" @bind-Value="Book.Isbn" id="isbn"/>
    </div>
    <br/>
    <div class="form-group">
        <label for="year">Year</label>
        <InputNumber class="form-control" @bind-Value="Book.Year" id="year"/>
    </div>
    <br/>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber class="form-control" @bind-Value="Book.Price" id="price"/>
    </div>
    <br/>
    <div class="form-group">
        <label for="summary">Summary</label>
        <InputText class="form-control" @bind-Value="Book.Summary" id="summary"/>
    </div>
    <br/>
    <div class="form-group">
        <label for="author">Author</label>
        <InputSelect class="form-select" @bind-Value="Book.AuthorId" id="authorid">
            <option value="">-- Select Author --</option>
            @foreach(var author in Authors)
            {
                <option value="@author.Id">@author.FirstName @author.LastName</option>
            }
        </InputSelect>
    </div>
    <br/>
    <div class="form-group">
        <label>Book Cover Photo</label>
        <InputFile OnChange="HandleFileSelection"/>
        <img src="@img" width="100" height="100" class="img-thumbnail" />
        <p class="text-danger">@UploadFileWarning</p>
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">
        <span class="oi oi-pencil"></span>Save
    </button>
    <button @onclick="BackToList" type="button" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>Back To List
    </button>

</EditForm>

@code {
    private BookCreateDto Book = new();
    private List<AuthorReadOnlyDto> Authors = new();
    private string UploadFileWarning = string.Empty;
    private string img = string.Empty;
    private long maxFileSize = 1024 * 1024 * 5;

    protected override async Task OnInitializedAsync()
    {
        var response = await authorService.Get();
        if (response.Success)
        {
            Authors = response.Data;
        }
    }
    private async Task HandleCreateBook()
    {
        var response = await bookService.Create(Book);
        if (response.Success)
        {
            BackToList();
        }
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            if(file.Size > maxFileSize)
            {
                UploadFileWarning = "This file is too big for upload.";
                return;
            }

            var ext = System.IO.Path.GetExtension(file.Name);
            if((ext.ToLower().Contains("jpg") || ext.ToLower().Contains("png") || ext.ToLower().Contains("jpeg")) == false)
            {
                UploadFileWarning = "Please select a valid image file (*.jpg | *.png)";
                return;
            }

            var byteArray = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(byteArray);
            string imageType = file.ContentType;
            string base64String = Convert.ToBase64String(byteArray);

            Book.ImageData = base64String;
            Book.OriginalImageName = file.Name;
            img = $"data:{imageType}; base64, {base64String}";

        }
    }

    private void BackToList()
    {
        navManager.NavigateTo("/books/");
    }
}
